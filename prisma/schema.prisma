// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// server/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  HOST
  GUEST
}

model User {
  id                Int                @id @default(autoincrement())
  name              String
  email             String             @unique
  password          String
  role              UserRole           @default(GUEST)
  phone             String?
  profileImage      String?
  bio               String?            @db.Text
  isVerified        Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  properties        Property[]         @relation("HostProperties")
  bookings          Booking[]          @relation("GuestBookings")
  reviews           Review[]
  wishlist          Wishlist[]
  hostReviews       HostReview[]       @relation("HostReviews")
  guestReviews      HostReview[]       @relation("GuestReviews")
  categories        Category[]
  propertyTypes     PropertyType[]
  amenities         Amenity[]
  locationFeatures  LocationFeature[]
}

model Category {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String?     @db.Text
  createdBy   User        @relation(fields: [userId], references: [id])
  userId      Int
  properties  Property[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model PropertyType {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String?     @db.Text
  createdBy   User        @relation(fields: [userId], references: [id])
  userId      Int
  properties  Property[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Amenity {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  icon        String?
  createdBy   User        @relation(fields: [userId], references: [id])
  userId      Int
  properties  Property[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model LocationFeature {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  icon        String?
  createdBy   User        @relation(fields: [userId], references: [id])
  userId      Int
  properties  Property[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum ListingType {
  RENT
  SALE
}

enum RentalPeriod {
  DAY
  MONTH
  YEAR
}

model Property {
  id                Int               @id @default(autoincrement())
  title             String
  slug              String            @unique
  description       String            @db.Text
  price             Decimal           @db.Decimal(10, 2)
  listingType       ListingType
  rentalPeriod      RentalPeriod?
  bedrooms          Int?
  bathrooms         Int?
  area              Float?
  address           String
  city              String
  state             String?
  country           String
  zipCode           String?
  latitude          Float?
  longitude         Float?
  host              User              @relation("HostProperties", fields: [hostId], references: [id])
  hostId            Int
  category          Category          @relation(fields: [categoryId], references: [id])
  categoryId        Int
  propertyType      PropertyType      @relation(fields: [propertyTypeId], references: [id])
  propertyTypeId    Int
  amenities         Amenity[]
  locationFeatures  LocationFeature[]
  images            PropertyImage[]
  bookings          Booking[]
  reviews           Review[]
  wishlist          Wishlist[]
  isAvailable       Boolean           @default(true)
  availableFrom     DateTime?
  availableTo       DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model PropertyImage {
  id          Int       @id @default(autoincrement())
  url         String
  caption     String?
  property    Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId  Int
  isFeatured  Boolean   @default(false)
  createdAt   DateTime  @default(now())
}

model Booking {
  id              Int       @id @default(autoincrement())
  property        Property  @relation(fields: [propertyId], references: [id])
  propertyId      Int
  guest           User      @relation("GuestBookings", fields: [guestId], references: [id])
  guestId         Int
  startDate       DateTime
  endDate         DateTime
  totalPrice      Decimal   @db.Decimal(10, 2)
  guestCount      Int       @default(1)
  status          String    @default("pending") // pending, confirmed, cancelled, completed
  paymentStatus   String    @default("unpaid")  // unpaid, paid
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  review          Review?
}

model Review {
  id          Int       @id @default(autoincrement())
  property    Property  @relation(fields: [propertyId], references: [id])
  propertyId  Int
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  booking     Booking   @relation(fields: [bookingId], references: [id])
  bookingId   Int       @unique
  rating      Int
  comment     String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model HostReview {
  id          Int       @id @default(autoincrement())
  host        User      @relation("HostReviews", fields: [hostId], references: [id])
  hostId      Int
  guest       User      @relation("GuestReviews", fields: [guestId], references: [id])
  guestId     Int
  rating      Int
  comment     String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Wishlist {
  id          Int       @id @default(autoincrement())
  name        String    @default("Favorites")
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  properties  Property[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, name])
}
